from PyQt4 import QtGui, QtCore
import pyqtgraph as pg
import numpy as np
import os
import sys
from thread import start_new_thread

import rospy
from nav_msgs.msg import Path
from std_msgs.msg import Float64MultiArray
from std_msgs.msg import Int32MultiArray

class GUI(QtGui.QWidget):
	def __init__(self, init_mode):
		super(GUI, self).__init__()
		#Set mode parameter.
		self.init_mode = init_mode
		self.autonomous_mode = False
		self.system_ready = False
		#UI parameter.
		self.height = 600
		self.width = 1000
		#Build up UI.
		if(self.init_mode): self.initUI_Repeat()
		else: self.initUI_Teach()
		self.qtConnections()
		#ROS Interface.
		rospy.init_node('gui')
		self.gui_info_pub = rospy.Publisher('gui/commands',Int32MultiArray,queue_size=10)
		self.gui_info_sub = rospy.Subscriber('gui/data', Float64MultiArray,self.dataCallback,queue_size=10)
		self.programms_sub = rospy.Subscriber('programms',Int32MultiArray,self.programmCallback,queue_size=10) 
		self.repeat_path_sub = rospy.Subscriber('repeat_path', Path,self.pathCallback,queue_size=10) 
		self.teach_path_sub = rospy.Subscriber('teach_path', Path,self.teachCallback,queue_size=10)
		#Init running programms.
		self.running = [0 for i in range(0,8)]
		#Init teach and repeat path.
		self.repeat_path = np.zeros((1,2))
		self.teach_path = np.zeros((1,2))
		#Starting spin in new thread so that it runs parallel to GUI.
		rate = rospy.Rate(10)
		start_new_thread(rospy.spin,())

	def initUI_Repeat(self):
		self.setWindowTitle('ARC')
		self.setWindowIcon(QtGui.QIcon(os.path.join(os.getcwd(), '../resources/logo.jpg')))
		#Define layouts.
		top_left_layout = QtGui.QHBoxLayout()
		top_right_layout = QtGui.QHBoxLayout()
		middle_left_upper_layout = QtGui.QVBoxLayout()
		middle_left_under_left_layout = QtGui.QVBoxLayout()
		middle_left_under_right_layout = QtGui.QVBoxLayout()
		middle_right_layout = QtGui.QVBoxLayout()
		lower_left_layout = QtGui.QVBoxLayout()
		lower_center_layout = QtGui.QVBoxLayout()
		lower_right_layout = QtGui.QVBoxLayout()
		#Create Logo and Title.
		logo = QtGui.QLabel()
		logo.setPixmap(QtGui.QPixmap(os.path.join(os.getcwd(), '../resources/logo.jpg')))
		logo.setFixedSize(self.height/8, self.height/12)
		top_left_layout.addWidget(logo)
		#Create title label.
		title_label = QtGui.QLabel("Autonomous Racing Car")
		title_label.setStyleSheet("background-color: white; color: black")
		title_label.setFont(QtGui.QFont('SansSerif', 25))
		title_label.setAlignment(QtCore.Qt.AlignCenter | QtCore.Qt.AlignVCenter)
		title_label.setFixedSize(self.width*0.75-self.height/9, self.height/12)
		top_left_layout.addWidget(title_label)     
		#Create mode label.
		mode_label = QtGui.QLabel("REPEAT")
		mode_label.setStyleSheet("background-color: black; color: white")
		mode_label.setFont(QtGui.QFont('SansSerif', 25))
		mode_label.setAlignment(QtCore.Qt.AlignCenter | QtCore.Qt.AlignVCenter)
		mode_label.setFixedSize(self.width/4, self.height/12)
		top_right_layout.addWidget(mode_label)
		#Create Velocity ist Display.
		self.velocity_ist_display = QtGui.QLineEdit("0.0")
		self.velocity_ist_display.setStyleSheet("background-color: black; color: white")
		self.velocity_ist_display.setAlignment(QtCore.Qt.AlignCenter)
		self.velocity_ist_display.setFont(QtGui.QFont('SansSerif', 20,weight=QtGui.QFont.Bold))
		self.velocity_ist_display.setFixedSize(self.width/3, self.height/10,)
		middle_left_upper_layout.addWidget(self.velocity_ist_display)
		#Create Velocity should Display.
		velocity_should_label = self.createLabel("Vel SHOULD", middle_left_under_left_layout)
		self.velocity_should_display = self.createDisplay("white", middle_left_under_left_layout)
		#Create Steering Display.
		steering_ist_label = self.createLabel("Steer IST", middle_left_under_left_layout)
		self.steering_ist_display = self.createDisplay("white", middle_left_under_left_layout)
		steering_should_label = self.createLabel("Steer SHOULD", middle_left_under_left_layout)
		self.steering_should_display = self.createDisplay("white", middle_left_under_left_layout)
		#Create Array Index Display.
		array_index_label = self.createLabel("INDEX", middle_left_under_left_layout)
		self.array_index_display = self.createDisplay("white", middle_left_under_left_layout)
		#Create Tracking Error Display.
		tracking_error_label = self.createLabel("Track Error", middle_left_under_right_layout)
		self.tracking_error_display = self.createDisplay("white", middle_left_under_right_layout)
		#Create Obstacle Distance Display.
		obstacle_distance_label = self.createLabel("Obstacle", middle_left_under_right_layout)
		self.obstacle_distance_display = self.createDisplay("white", middle_left_under_right_layout)
		#Create Distance Display.
		distance_start_label = self.createLabel("START", middle_left_under_right_layout)
		self.distance_start_display = self.createDisplay("white", middle_left_under_right_layout)
		distance_end_label = self.createLabel("END", middle_left_under_right_layout)
		self.distance_end_display = self.createDisplay("white", middle_left_under_right_layout)
		#Path plot.
		self.plotwidget = pg.PlotWidget()
		self.plotcurve = pg.ScatterPlotItem()
		self.plotwidget.addItem(self.plotcurve)
		middle_right_layout.addWidget(self.plotwidget)
		#Create programm label.
		self.obstacle_detection_label = createProgramm("OSDET", lower_left_layout)
		self.pure_pursuit_label = createProgramm("PP", lower_left_layout)
		self.rovio_label = createProgramm("ROVIO", lower_left_layout)
		self.rslam_label = createProgramm("RSLAM", lower_left_layout)
		self.state_estimation_label = createProgramm("SEST", lower_left_layout)
		self.vcu_label = createProgramm("VCU", lower_left_layout)
		self.gps_label = createProgramm("GPS", lower_left_layout)
		self.vi_label = createProgramm("VI", lower_left_layout)
		self.velodyne_label = createProgramm("LASER", lower_left_layout)
		#Shutdown button.
		self.shutdown_button = QtGui.QPushButton("Shutdown")
		self.shutdown_button.setFont(QtGui.QFont('SansSerif',15,weight=QtGui.QFont.Bold))
		self.shutdown_button.setFixedSize(self.width/4,self.height/16)
		lower_center_layout.addWidget(self.shutdown_button)
		#Stop button.
		self.stop_button = QtGui.QPushButton("STOP")
		self.stop_button.setStyleSheet("background-color: red")
		self.stop_button.setFont(QtGui.QFont('SansSerif',15,weight=QtGui.QFont.Bold))
		self.stop_button.setFixedSize(self.width/4,self.height/16)
		lower_center_layout.addWidget(self.stop_button)
		#Mode button
		self.start_button = QtGui.QPushButton("System Booting")
		self.start_button.setFont(QtGui.QFont('SansSerif',15,weight=QtGui.QFont.Bold))
		self.start_button.setStyleSheet("background-color: yellow")
		self.start_button.setFixedSize(self.width/4,self.height/8)
		lower_right_layout.addWidget(self.start_button)
		#Set layouts.
		layout = QtGui.QGridLayout()
		layout.addLayout(top_left_layout,0, 0, 1, 4)
		layout.addLayout(top_right_layout,0,4)
		layout.addLayout(middle_left_upper_layout,1,0,1,2)
		layout.addLayout(middle_left_under_left_layout,2,0,1,2)
		layout.addLayout(middle_left_under_right_layout,2,1,1,2)
		layout.addLayout(middle_right_layout,1,2,2,3)
		layout.addLayout(lower_left_layout,4,0,1,2)
		layout.addLayout(lower_center_layout,4,3)
		layout.addLayout(lower_right_layout,4,4)
		self.setLayout(layout)
		#Set Window geometry and background color.
		palette = QtGui.QPalette()
		palette.setColor(QtGui.QPalette.Background,QtCore.Qt.black)
		self.setPalette(palette)
		self.setGeometry(100, 100, self.width, self.height)
		self.show()

	def initUI_Teach(self):
		self.setWindowTitle('ARC')
		self.setWindowIcon(QtGui.QIcon(os.path.join(os.getcwd(), '../resources/logo.jpg')))
		#Define layouts.
		top_left_layout = QtGui.QHBoxLayout()
		top_right_layout = QtGui.QHBoxLayout()
		middle_left_layout = QtGui.QVBoxLayout()
		middle_right_layout = QtGui.QVBoxLayout()
		lower_left_layout = QtGui.QVBoxLayout()
		lower_right_layout = QtGui.QVBoxLayout()
		#Create Logo and Title.
		logo = QtGui.QLabel()
		logo.setPixmap(QtGui.QPixmap(os.path.join(os.getcwd(), '../resources/logo.jpg')))
		logo.setFixedSize(self.height/8, self.height/12)
		top_left_layout.addWidget(logo)
		#Create title label.
		title_label = QtGui.QLabel("Autonomous Racing Car")
		title_label.setStyleSheet("background-color: white; color: black")
		title_label.setFont(QtGui.QFont('SansSerif', 25))
		title_label.setAlignment(QtCore.Qt.AlignCenter | QtCore.Qt.AlignVCenter)
		title_label.setFixedSize(self.width*0.75-self.height/9, self.height/12)
		top_left_layout.addWidget(title_label)     
		#Create mode label.
		mode_label = QtGui.QLabel("TEACH")
		mode_label.setStyleSheet("background-color: black; color: white")
		mode_label.setFont(QtGui.QFont('SansSerif', 25))
		mode_label.setAlignment(QtCore.Qt.AlignCenter | QtCore.Qt.AlignVCenter)
		mode_label.setFixedSize(self.width/4, self.height/12)
		top_right_layout.addWidget(mode_label)
		#Create Velocity ist Display.
		self.velocity_ist_display = QtGui.QLineEdit("0.0")
		self.velocity_ist_display.setStyleSheet("background-color: black; color: white")
		self.velocity_ist_display.setAlignment(QtCore.Qt.AlignCenter)
		self.velocity_ist_display.setFont(QtGui.QFont('SansSerif', 20,weight=QtGui.QFont.Bold))
		self.velocity_ist_display.setFixedSize(self.width/6, self.height/10,)
		middle_left_layout.addWidget(self.velocity_ist_display)
		#Create Steering Display.
		steering_ist_label = self.createLabel("Steer IST", middle_left_layout)
		self.steering_ist_display = self.createDisplay("white", middle_left_layout)
		#Create Array Index Display.
		array_index_label = self.createLabel("INDEX", middle_left_layout)
		self.array_index_display = self.createDisplay("white", middle_left_layout)
		#Path plot.
		self.plotwidget = pg.PlotWidget()
		self.plotcurve = pg.ScatterPlotItem()
		self.plotwidget.addItem(self.plotcurve)
		middle_right_layout.addWidget(self.plotwidget)
		#Create programm label.
		self.rovio_label = createProgramm("ROVIO", lower_left_layout)
		self.rslam_label = createProgramm("RSLAM", lower_left_layout)
		self.state_estimation_label = createProgramm("SEST", lower_left_layout)
		self.vcu_label = createProgramm("VCU", lower_left_layout)
		self.gps_label = createProgramm("GPS", lower_left_layout)
		self.vi_label = createProgramm("VI", lower_left_layout)
		#Mode button
		self.start_button = QtGui.QPushButton("System Booting")
		self.start_button.setFont(QtGui.QFont('SansSerif',15,weight=QtGui.QFont.Bold))
		self.start_button.setStyleSheet("background-color: yellow")
		self.start_button.setFixedSize(self.width/4,self.height/8)
		lower_right_layout.addWidget(self.start_button)
		#Set layouts.
		layout = QtGui.QGridLayout()
		layout.addLayout(top_left_layout,0, 0, 1, 4)
		layout.addLayout(top_right_layout,0,4)
		layout.addLayout(middle_left_layout,1,0,1,3)
		layout.addLayout(middle_right_layout,1,1,3,4)
		layout.addLayout(lower_left_layout,4,0,1,4)
		layout.addLayout(lower_right_layout,4,4)
		self.setLayout(layout)
		#Set Window geometry and background color.
		palette = QtGui.QPalette()
		palette.setColor(QtGui.QPalette.Background,QtCore.Qt.black)
		self.setPalette(palette)
		self.setGeometry(100, 100, self.width, self.height)
		self.show()

	def qtConnections(self):
		if(self.init_mode): self.shutdown_button.clicked.connect(self.shutdown)
		self.start_button.clicked.connect(self.changeMode)
		if(self.init_mode): self.stop_button.clicked.connect(self.emergencyStop)

	def createDisplay(self, color, layout):
		display = QtGui.QLineEdit("0.0")
		display.setStyleSheet("background-color: " + color)
		display.setFixedSize(self.width/10, self.height/20)
		layout.addWidget(display)
		return display

	def createLabel(self, name, layout):
		label = QtGui.QLabel(name)
		palette = QtGui.QPalette()
		palette.setColor(QtGui.QPalette.Foreground,QtCore.Qt.white)
		label.setPalette(palette)
		label.setFont(QtGui.QFont('SansSerif', 10))
		label.setFixedSize(self.width/10, self.height/20)
		layout.addWidget(label)
		return label

	def createProgramm(self, name, layout):
		label = QtGui.QLabel(name)
		label.setStyleSheet("background-color: red")
		label.setAlignment(QtCore.Qt.AlignCenter)
		label.setFixedSize(self.width/20,self.height/20)
		layout.addWidget(label)
		return label

	def updateDisplay(self, infos):
		self.velocity_ist_display.setText(str(infos[0]))
		if(self.init_mode): self.velocity_should_display.setText(str(infos[1]))
		self.steering_ist_display.setText(str(infos[2]))
		if(self.init_mode): self.steering_should_display.setText(str(infos[3]))
		self.array_index_display.setText(str(infos[4]))
		if(self.init_mode): self.tracking_error_display.setText(str(infos[5]))
		if(self.init_mode): self.obstacle_distance_display.setText(str(infos[6]))
		if(self.init_mode): self.distance_start_display.setText(str(infos[7]))
		if(self.init_mode): self.distance_end_display.setText(str(infos[8]))


	def updatePath(self):
		self.plotcurve.clear()
		teach = self.teach_path
		self.plotcurve.addPoints(teach[:,0], teach[:,1], symbol='o', pen=QtGui.QPen(QtGui.QColor(0, 255, 0)))
		repeat = self.repeat_path
		self.plotcurve.addPoints(repeat[:,0], repeat[:,1], symbol='o', pen=QtGui.QPen(QtGui.QColor(0, 0, 255)))

	def updateProgrammDisplay(self, running):
		#Updating programm labels.
		if(running[0] != self.running[0]): checkProgramm(obstacle_detection_label, running[0])
		if(running[1] != self.running[1]): checkProgramm(pure_pursuit_label, running[1])
		if(running[2] != self.running[2]): checkProgramm(rovio_label, running[2])
		if(running[3] != self.running[3]): checkProgramm(rslam_label, running[3])
		if(running[4] != self.running[4]): checkProgramm(state_estimation_label, running[4])
		if(running[5] != self.running[5]): checkProgramm(vcu_label, running[5])
		if(running[6] != self.running[6]): checkProgramm(gps_label, running[6])
		if(running[7] != self.running[7]): checkProgramm(vi_label, running[7])
		if(running[8] != self.running[8]): checkProgramm(velodyne_label, running[8])
		#Updating programm state.
		self.running = running
		#Check system startable.
		self.system_ready = True
		for element in running: 
			if(element == 0): self.system_ready = False
		if(self.system_ready): 
			self.start_button.setStyleSheet("background-color: cyan")
			self.start_button.setText("Ready") 

	def checkProgramm(self, label, running_state):
		if(running_state == -1): label.emit()
		if(running_state == 0): label.setStyleSheet("background-color: red")
		if(running_state == 1): label.setStyleSheet("background-color: green")

	def changeMode(self):
		#Change to manuell iff autonomous and repeat.
		if(self.init_mode and self.autonomous_mode):
			self.autonomous_mode = False
			self.system_ready = True
			self.start_button.setStyleSheet("background-color: yellow")
			self.start_button.setText("Autonomous")
			self.publishInfo([0,0,0])
		#Launch system iff ready only one time and go autonomous.
		elif(self.init_mode and self.system_ready):
			self.system_ready = False
			self.autonomous_mode = True
			self.start_button.setStyleSheet("background-color: blue")
			self.start_button.setText("Manuell")
			self.publishInfo([1,0,0])
		#Launch system iff ready only one time but stay manuelly.
		elif(self.system_ready):
			self.system_ready = False
			self.start_button.setStyleSheet("background-color: cyan")
			self.start_button.setText("System started") 

	def emergencyStop(self):
		self.publishInfo([bool(self.autonomous_mode),0,1])

	def shutdown(self):
		self.shutdown_button.setText("Slowing down")
		self.publishInfo([bool(self.autonomous_mode),1,0])

	def publishInfo(self, info_list):
		info = Int32MultiArray()
		info.data.insert(1,info_list[0])
		info.data.insert(2,info_list[1])
		info.data.insert(3,info_list[2])
		self.gui_info_pub.publish(info)

	def dataCallback(self, msg):
		data = msg.data
		self.updateDisplay(data)

	def pathCallback(self, msg):
		self.repeat_path = np.zeros((1,2))
		for element in msg.poses:
			path_element = np.array([-element.pose.position.y, element.pose.position.x])
			self.repeat_path = np.vstack([self.repeat_path, path_element])
		self.updatePath()

	def programmCallback(self, msg):
		data = msg.data
		self.updateProgrammDisplay(data)

	def teachCallback(self, msg):
		self.teach_path = np.zeros((1,2))
		for element in msg.poses:
			path_element = np.array([-element.pose.position.y, element.pose.position.x])
			self.teach_path = np.vstack([self.teach_path, path_element])
		self.updatePath()


def main():
	#Starting application.
	app = QtGui.QApplication(sys.argv)
	app.setApplicationName('ARC')
	#Getting Mode.
	mode = (sys.argv[1]=="true")
	#Creating GUI.
	ex = GUI(mode)
	sys.exit(app.exec_())

if __name__ == '__main__':
	main()
